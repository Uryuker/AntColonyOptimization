/**
 * 
 */
package fr.utbm.ia54.antcolony.organization


import fr.utbm.ia54.antcolony.graphe.Node;
import fr.utbm.ia54.antcolony.graphe.Edge;
import fr.utbm.ia54.antcolony.graphe.Graph;

capacity Capicities {
	
	def move(n : Node)
	def searchNextEdge()
	
}

capacity EnvCapacities{
	
	def updatePheromon(graph : Graph) : Graph
	def updateGraph(graph : Graph) : Graph
	
}

skill EnvSkill implements EnvCapacities{
	
	def updatePheromon(graph : Graph) : Graph{
		
		for(Edge e : graph.getEdges()){
			double ph = (e.getPheromon * tauxEvap )+ (e.AntCount() * 0.1) 
			e.setPheromon(ph)
		} 
		return graph
	}
	
	def updateGraph(graph : Graph) : Graph {
		
		for(a : graph.ListAnt){}
			Node n = a.searchNextEdge()
			a.move(n)
		}
		return graph
	}
		
}


skill Skill implements Capicities{
	
	var previousNode : new Node()
	
	var actualNode : new Node()
	
	
	
	override move(e:Edge, n: Node){
		e.setnbAnt = e.getnbAnt +1;
		previousNode = actualNode
		actualNode = n
		
	}
	
	override searchNextEdge() : Node {
		//algo recherche prochain edge
		var listEdge = actualNode.getNeighbors()
		var nextEdge : new Edge()
		var p : float
		
		for(e : listEdge)) {
			
			float max
			max = p
			p = (e.getPheromon * 1/e.getweight() / (graph.totalPheromon * 1/graph.totalDistance)
			if max < p{
				max = p
				nextEdge = e
			}
		}
		return nextEdge.getOppositeNode(actualNode)
		}
}