/**
 * 
 */
package fr.utbm.ia54.antcolony.organization

import fr.utbm.ia54.antcolony.graphe.Graph
import fr.utbm.ia54.antcolony.message.PheromoneRateChange
import fr.utbm.ia54.antcolony.message.PheromoneChange
import fr.utbm.ia54.antcolony.message.AntNumberChange
import fr.utbm.ia54.antcolony.message.NewGraph
import io.sarl.core.Behaviors
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Initialize
import io.sarl.util.OpenEventSpace
import io.sarl.util.OpenEventSpaceSpecification
import java.util.UUID
import fr.utbm.ia54.antcolony.gui.GraphStreamToGraph
import fr.utbm.ia54.antcolony.message.Stop
import fr.utbm.ia54.antcolony.message.Pause
import fr.utbm.ia54.antcolony.message.Play
import io.sarl.core.Lifecycle
import java.util.List

/**
 * 
 *
 */
agent Env {
	
	var graph : Graph
	var tauxEvap : int 
	var antNumber : int
	var space : OpenEventSpace
	var spaceIn : OpenEventSpace
	uses DefaultContextInteractions, Behaviors, Lifecycle, EnvCapacities
	
	on Initialize {
		var i : int
		var uUID = UUID::randomUUID
		space = defaultContext.getOrCreateSpaceWithSpec(typeof(OpenEventSpaceSpecification),
		occurrence.parameters.get(0) as UUID)
		space.register(asEventListener())
	
		spaceIn = defaultContext.getOrCreateSpaceWithSpec(typeof(OpenEventSpaceSpecification),
		uUID)
		spaceIn.register(asEventListener())
		//spawn Ant
		for(i=0;i<antNumber;i++)
			spawn(Ant,uUID)
		}
	
	on Update{
		graph = occurrence.graph
		graph = updateGraph(graph,spaceIn,tauxEvap)
		var evt = new PheromoneChange(new GraphStreamToGraph().Graph2GS(graph))
		space.emit(evt)
	}
	on PheromoneRateChange{
		tauxEvap = occurrence.pheromoneRate
	}
	on AntNumberChange{
		antNumber = occurrence.antNumber
	}
	on NewGraph{
		graph=new GraphStreamToGraph().GS2Graph(occurrence.graph)
	}
	
	on Play{
		
	}
	
	on Pause{
		
	}
		
	on Stop{
		killMe
	}
	
	
}